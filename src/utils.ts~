export const isHtmlString = (str: string): boolean => {
  return /<\/?[a-z][\s\S]*>/i.test(str);
};

export const extractImageUrlsFromHtml = (html: string): string[] => {
  const imgUrls: string[] = [];
  const imgRegex = /<img[^>]+src="([^">]+)"/g;
  let match;

  while ((match = imgRegex.exec(html)) !== null) {
    imgUrls.push(match[1]);
  }

  return imgUrls;
};

export const extractImageUrlsFromData = (data: any): string[] => {
  let urls: string[] = [];

  if (Array.isArray(data)) {
    data.forEach((item) => {
      urls = urls.concat(extractImageUrlsFromData(item));
    });
  } else if (typeof data === 'object' && data !== null) {
    for (const key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        urls = urls.concat(extractImageUrlsFromData(data[key]));
      }
    }
  } else if (typeof data === 'string') {
    if (isHtmlString(data)) {
      urls = urls.concat(extractImageUrlsFromHtml(data));
    } else if (data.startsWith('http')) {
      urls.push(data);
    }
  }

  return urls;
};

export const preloadImages = async (imageUrls: string[]): Promise<void> => {
  const promises = imageUrls.map((url) => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.src = url;
      img.onload = resolve;
      img.onerror = (error) => {
        console.error(`Failed to load image at ${url}`, error);
        reject(error);
      };
    });
  });

  try {
    await Promise.all(promises);
  } catch (error) {
    console.error('Some images failed to load.');
  }
};
